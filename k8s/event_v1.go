// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package k8s

import (
	"time"
)

// EventV1 Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
type EventV1 struct {
	// action is what action was taken/failed regarding to the regarding object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.
	Action *string `json:"action,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// deprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
	DeprecatedCount *int32 `json:"deprecatedCount,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeprecatedFirstTimestamp *time.Time `json:"deprecatedFirstTimestamp,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	DeprecatedLastTimestamp *time.Time     `json:"deprecatedLastTimestamp,omitempty"`
	DeprecatedSource        *EventSourceV1 `json:"deprecatedSource,omitempty"`
	// MicroTime is version of Time with microsecond level precision.
	EventTime time.Time `json:"eventTime"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string       `json:"kind,omitempty"`
	Metadata *ObjectMetaV1 `json:"metadata,omitempty"`
	// note is a human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note *string `json:"note,omitempty"`
	// reason is why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.
	Reason    *string            `json:"reason,omitempty"`
	Regarding *ObjectReferenceV1 `json:"regarding,omitempty"`
	Related   *ObjectReferenceV1 `json:"related,omitempty"`
	// reportingController is the name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`. This field cannot be empty for new Events.
	ReportingController *string `json:"reportingController,omitempty"`
	// reportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be empty for new Events and it can have at most 128 characters.
	ReportingInstance *string        `json:"reportingInstance,omitempty"`
	Series            *EventSeriesV1 `json:"series,omitempty"`
	// type is the type of this event (Normal, Warning), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.
	Type *string `json:"type,omitempty"`
}
