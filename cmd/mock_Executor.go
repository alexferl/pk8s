// Code generated by mockery v2.44.1. DO NOT EDIT.

package cmd

import mock "github.com/stretchr/testify/mock"

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: path
func (_m *MockExecutor) Init(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockExecutor_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - path string
func (_e *MockExecutor_Expecter) Init(path interface{}) *MockExecutor_Init_Call {
	return &MockExecutor_Init_Call{Call: _e.mock.On("Init", path)}
}

func (_c *MockExecutor_Init_Call) Run(run func(path string)) *MockExecutor_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExecutor_Init_Call) Return(_a0 []byte, _a1 error) *MockExecutor_Init_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_Init_Call) RunAndReturn(run func(string) ([]byte, error)) *MockExecutor_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Tidy provides a mock function with given fields: path
func (_m *MockExecutor) Tidy(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Tidy")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_Tidy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tidy'
type MockExecutor_Tidy_Call struct {
	*mock.Call
}

// Tidy is a helper method to define mock.On call
//   - path string
func (_e *MockExecutor_Expecter) Tidy(path interface{}) *MockExecutor_Tidy_Call {
	return &MockExecutor_Tidy_Call{Call: _e.mock.On("Tidy", path)}
}

func (_c *MockExecutor_Tidy_Call) Run(run func(path string)) *MockExecutor_Tidy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockExecutor_Tidy_Call) Return(_a0 []byte, _a1 error) *MockExecutor_Tidy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_Tidy_Call) RunAndReturn(run func(string) ([]byte, error)) *MockExecutor_Tidy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
